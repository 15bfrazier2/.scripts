#!/bin/sh

rootdir="$HOME/Wallpapers/"

current=`grep -o "'.*" ~/.fehbg | tr -d "'" | xargs dirname |awk '{print $1}'`

#flags
r_flag=''
i_flag=''
s_flag=''

show_usage() {

	printf "Usage: setwp [-h] [-c] [-r] [-l] [-i] [-s] [-d 'new wallpaper directory'] 'directory' (Default: \$HOME/Wallpapers/)\n" 
}

#function to display the usage and the use of script
show_help() {
	bold=$(tput bold)
	normal=$(tput sgr0)

	show_usage
	printf "\nSpecify the directory with the wallpaper images you would like to set. The number of monitors should be maximum number of images in the directory. The first image will be used to generate a wal colorscheme.

The directory structure should be as follows:

ROOT_WALLPAPER_DIRECTORY
	|
	|-------WALLPAPER DIRECTORY 1
	|		|	
	|		|-------IMAGES
	|	
	|-------WALLPAPER DIRECTORY 2
	|		|
	|		|-------IMAGES
	|
	|-------[...]
	
${bold}OPTIONS${normal}

-h\tDisplay this help message
-c\tDisplay the current wallpaper set
-r\tSet with a random wallpaper
-d\tChange the root wallpaper directory from the default \$HOME/Wallpapers/
-l\tList the wallpapers currently saved in your root wallpaper directory
-i\tInteractive mode
-s\tStretch the image across all monitors
"
}

#function to run script in interactive mode, show wallpaper options and let them choose
interactive() {

	options=($(ls -1 "$rootdir"))
	ITER=1
	for i in "${!options[@]}"; do
		printf "%s) %s\n" "$ITER" "${options[$i]}"
		let ITER=ITER+1
	done
	declare -i input length
	read input
	let input=input-1
	length=${#options[@]}-1
	if [ $input -lt 0 -o $input -gt $length ]; then
		printf "Invalid Selection" && interactive
	else
		choice="${options[$input]}"
	fi

}
#main function that does all the logic
setw() {
	dir=''
	#can give directory with full path or single directory name as long as its in root wp directory
	#this next part checks to see if directory exists in either incarnation
	[ -n "$1" ] && dir="$1"


	#tell user to use real directory
	[ ! -d "$dir" ] && dir=$rootdir$dir 
	[ ! -d "$dir" ] && show_usage && printf "\nInvalid directory: %s\n" $dir && exit 0 

	#variables used in the main logic to determine what options to use when setting background with feh

	firstfile=`find $dir -type f | tail -1`
	filecount=`find $dir -type f | wc -l`
	
	#variables that are used to see if image matches the horizontal dimension of monitor
	horizontal=`identify -format '%w' $firstfile`
	displayhoriz=`xwininfo -root |sed -n 's/.* Width: \([^ ]*\).*/\1/p' || xrandr |sed -n 's/.* current \([^ ]*\).*/\1/p'`

	#main logic conditionals, if wide enough to cover both, do so, if same number of images as monitors, use one for each, if only 1 put it on both
	[ "$horizontal" = "$displayhoriz" -o -n "$s_flag" ] && wal -n -i $firstfile && feh --no-xinerama --bg-fill $firstfile && exit 0  
	[ $filecount -eq 2 ] && wal -n -i $firstfile && feh --bg-fill $dir && exit 0 || wal -n -i $firstfile && feh --bg-fill $firstfile --bg-fill $firstfile && exit 0


}	
	
#process flags
while getopts 'hcrd:lis' flag; do
	case "${flag}" in
		h) show_help && exit 0;;
		c) echo $current && exit 0;;
		r) r_flag="true" ;;
		d) [ -d "$OPTARG" ] && rootdir="$OPTARG" ;;
		l) ls -1 $rootdir && exit 0 ;;
		i) i_flag="true" ;; 
		s) s_flag="true" ;;
		*) show_usage && exit 0 ;;
	esac

done

#shift the flags out of the way to get to arguments
shift $(($OPTIND -1))

#if r flag
randir=`find $rootdir -mindepth 1 -type d | sort --random-sort | head -1`
[ -n "$r_flag" ] && setw $randir && exit 0 

#if i flag
[ -n "$i_flag" ] && interactive && setw "$choice" && exit 0

#if no flags run the setw function with the given argument
[ $# -eq 1 ] && setw $1 && exit 0 || show_usage && exit 0
